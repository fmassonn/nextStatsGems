# Creates text files with the sea ice area and extent data for# pre-defined regions of the worldimport datetimeimport numpy as npimport osfrom netCDF4 import Datasetimport csv# Two functions to compute sea ice area and sea ice extentdef compute_extent(concentration, cellarea, threshold = 15.0, mask = 1):  """ Input: - sea ice concentration in %               numpy array. if 3-D, time is assumed to be 1st             - Threshold over which to consider cell as icy             - cellarea: array of grid cell areas (sq. meters)             - mask (1 on ocean, 0 on continent)      Output: Sea ice extent in the region defined by the mask  """  import sys  import numpy as np    if np.max(concentration) < 10.0:    sys.exit("(compute_extent): concentration seems to not be in percent")  if len(concentration.shape) == 3:    nt, ny, nx = concentration.shape    ext = np.asarray([np.sum( (concentration[jt, :, :] > threshold) * cellarea * mask) / 1e12 for jt in range(nt)])  elif len(concentration.shape) == 2:    ext = np.sum( (concentration > threshold) * cellarea * mask) / 1e12  else:    sys.exit("(compute_extent): concentration has not 2 nor 3 dimensions")  return ext  def compute_area(concentration, cellarea, mask = 1):  """ Input: - sea ice concentration in %               numpy array. if 3-D, time is assumed to be 1st             - cellarea: array of grid cell areas (sq. meters)             - mask (1 on ocean, 0 on continent)      Output: Sea ice area in the region defined by the mask  """  import sys  import numpy as np  if np.max(concentration) < 10.0:    sys.exit("(compute_area): concentration seems to not be in percent")  if len(concentration.shape) == 3:    nt, ny, nx = concentration.shape    are = np.asarray([np.sum( concentration[jt, :, :] / 100.0 * cellarea * mask) / 1e12 for jt in range(nt)])  elif len(concentration.shape) == 2:    are = np.sum( concentration / 100.0 * cellarea * mask) / 1e12  else:    sys.exit("(compute_area): concentration has not 2 nor 3 dimensions")  return are#climDir = os.environ["TECLIM_CLIMATE_DATA"]AmundsenclimDir = "/Users/massonnetf/CLIMDATA/"rawDir = climDir + "obs/ice/siconc/OSI-SAF/OSI-450/raw"cellArea = 25e3 ** 2# Defintions of sectors#            #                                       LatS  LatN    LonW        LonEsectors = [                                        #["Arctic",                    0, 91,      -180,        180   ],               ["Weddell",                 -91,  0,     -60.0,       20.0  ],           ["Indian",                  -91,  0,      20.0 ,       90.0  ],            ["West Pacific",            -91,  0,      90.0 ,       160.0 ],           ["Ross",                    -91,  0,      160.0,       -130.0],           ["Amundsen-Bellingshausen", -91,  0,      -130.0,      -60.0 ],           ["Southern Ocean"         , -91,  0,      -180.0,      180.0 ],          ]dateInit, dateEnd = datetime.date(1979, 1, 1), datetime.date(2022, 2, 28)nDays = (dateEnd - dateInit).days + 1dates = [dateInit + datetime.timedelta(days = d) for d in range(nDays)]for sector in sectors:            sectorName = sector[0]    fileCSV = open(sectorName + ".csv", 'w')    # create the csv writer    ###writer = csv.writer(fileCSV)    ###writer.writerow(["YYYYMMDD\tSIE [10^6km^2]\tSIA [10^6km^2]"])        latS, latN, lonW, lonE = sector[1:]        createMask = True # Used later to create a mask    print(sectorName)    # Choose the right file    if latS >= 0:        hemi = "nh"    elif latN <= 0:        hemi = "sh"    else:        print("Error")        stop()            with open(sectorName + ".csv", "w") as csvFile:        for date in dates:            #print("  " + str(date))                        stringDate = date.strftime("%Y%m%d")                        # Check file existence            fileName = "ice_conc_" + hemi + "_ease2-250_cdr-v2p0_" + stringDate +\                "1200.nc"                            filePath = rawDir + "/" + fileName                        if os.path.exists(filePath):                #print("    File found")                                f = Dataset(filePath, mode = "r")                sic = f.variables["ice_conc"][:]                                    if createMask:                    # (only once)                    lon = f.variables["lon"][:]                    lat = f.variables["lat"][:]                    ny, nx = lon.shape                                    # Re-center lon if needed                    lon[lon >   180] = lon[lon > 180]   - 360                    lon[lon < - 180] = lon[lon < - 180] + 360                                                            if lonW > lonE:                        # Special case straddling 180Â° meridian                        mask = (lat >= latS) * (lat < latN) * \                            ((lon >= lonW) + (lon < lonE))                    else:                        mask = (lat >= latS) * (lat < latN) * \                            (lon >= lonW) * (lon < lonE)                                                            createMask = False                f.close()                                # Compute area and extent                sia = compute_area(np.squeeze(sic),   cellArea, mask = mask)                sie = compute_extent(np.squeeze(sic), cellArea, mask = mask)                    ###row = [stringDate + "\t" + str(np.round(sie, 3)) + "\t" + str(np.round(sia, 3))]                ###writer.writerow(row)                csvFile.write(stringDate + "\t" + str(np.round(sie, 3)) + "\t" + str(np.round(sia, 3)) + "\n")                del sia, sie            else:                #print("    File not found")                pass                ###fileCSV.close()            del mask                            