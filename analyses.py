# Creates text files with the sea ice area and extent data for# pre-defined regions of the worldimport datetimeimport numpy as npimport osfrom netCDF4 import Datasetimport csvimport calendarimport matplotlib.pyplot as pltimport matplotlib.dates as mdatesimport matplotlibmatplotlib.rcParams['font.family'] = "Arial Narrow"#climDir = os.environ["TECLIM_CLIMATE_DATA"]AmundsenclimDir = "/Users/massonnetf/CLIMDATA/"rawDir = climDir + "obs/ice/siconc/OSI-SAF/OSI-450/raw"cellArea = 25e3 ** 2# Defintions of sectors#            #                                       LatS  LatN    LonW        LonEsectors = [                                        #["Arctic",                    0, 91,      -180,        180   ],               ["Weddell",                 -91,  0,     -60.0,       20.0  ],           ["Indian",                  -91,  0,      20.0 ,       90.0  ],            ["West Pacific",            -91,  0,      90.0 ,       160.0 ],           ["Ross",                    -91,  0,      160.0,       -130.0],           ["Amundsen-Bellingshausen", -91,  0,      -130.0,      -60.0 ],           ["Southern Ocean"         , -91,  0,      -180.0,      180.0 ],          ]nSectors = len(sectors)dateInit, dateEnd = datetime.date(1979, 1, 1), datetime.date(2021, 12, 31)nDays = (dateEnd - dateInit).days + 1nYears = dateEnd.year - dateInit.year + 1# Create vector of dates ignoring leap yearsmyDatesTmp = [dateInit + datetime.timedelta(days = d) \           for d in range(nDays)]    myDates = [m for m in myDatesTmp if not (m.day == 29 and m.month == 2)]nDates  = len(myDates)myData = np.full((nYears, 365, nSectors), np.nan)# Load the datafor jSector, sector in enumerate(sectors):    sectorName = sector[0]    print(sectorName)        # Open CSV file    fileCSV = open("./" + sectorName + ".csv", mode = "r")    reader = csv.reader(fileCSV, delimiter = "\t")        for row in reader:        thisDate = datetime.date(int(row[0][:4]), int(row[0][4:6]), int(row[0][6:8]))                if thisDate >= dateInit and thisDate <= dateEnd:            thisYear = thisDate.year                        # Compute day of year (ignore leap nature of years)                        if not(thisDate.month == 2 and thisDate.day == 29):                dayOfYear = (datetime.date(2001, thisDate.month, thisDate.day) - \                             datetime.date(2001, 1, 1)).days                            myData[thisYear - dateInit.year, dayOfYear, jSector] = row[1]                        fileCSV.close()                    # Plotsclim = np.nanmean(myData, axis = 0)tileClim = np.array([clim for y in range(nYears)])anom = myData - clim# Raw datafig, ax = plt.subplots(3, 2, dpi = 300, figsize = (6, 6))for j, a in enumerate(ax.flatten()):    a.scatter(myDates, myData[:, :, j].flatten(), 2)    a.set_title(sectors[j][0])    #a.xaxis.set_major_formatter(mdates.DateFormatter("%b"))fig.tight_layout()fig.savefig("./figRaw.png")# ClimatologiesdatesYear = [m for m in myDates if m.year == 2001]fig, ax = plt.subplots(3, 2, dpi = 300, figsize = (6, 6))for j, a in enumerate(ax.flatten()):    a.plot(datesYear, clim[:, j])    a.set_title(sectors[j][0])    a.xaxis.set_major_formatter(mdates.DateFormatter("%b"))fig.tight_layout()fig.savefig("./figClim.png")        # Anomaliesfig, ax = plt.subplots(3, 2, dpi = 300, figsize = (8, 6))for j, a in enumerate(ax.flatten()):    a.scatter(myDates, anom[:, :, j].flatten(), 0.5)    a.set_title(sectors[j][0])    a.grid()    a.set_axisbelow(True)    a.set_ylabel("Million km$^2$")    #a.xaxis.set_major_formatter(mdates.DateFormatter("%b"))fig.tight_layout()fig.savefig("./figAno.png")        